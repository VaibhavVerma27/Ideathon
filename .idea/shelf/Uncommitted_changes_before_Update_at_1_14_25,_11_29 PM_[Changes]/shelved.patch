Index: components/navbar/Navbar.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"use client\";\r\n\r\nimport Categories from \"./Categories\";\r\nimport Logo from \"./Logo\";\r\nimport UserMenu from \"./UserMenu\";\r\n\r\ninterface NavbarProps {}\r\nconst Navbar: React.FC<NavbarProps> = ({}) => {\r\n  return (\r\n    <div className=\"bg-black text-white p-6 sticky top-0 z-10 border-b-2 border-blue-500\">\r\n      <div\r\n        className=\"flex\r\n        flex-row\r\n        items-center\r\n        justify-between\r\n        gap-3\r\n        md:gap-0\"\r\n      >\r\n        <Logo />\r\n        <UserMenu />\r\n      </div>\r\n      <Categories />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/components/navbar/Navbar.tsx b/components/navbar/Navbar.tsx
--- a/components/navbar/Navbar.tsx	(revision fcf8b49156513da7a880815252a5d7d766b96cd8)
+++ b/components/navbar/Navbar.tsx	(date 1736877528720)
@@ -4,8 +4,7 @@
 import Logo from "./Logo";
 import UserMenu from "./UserMenu";
 
-interface NavbarProps {}
-const Navbar: React.FC<NavbarProps> = ({}) => {
+const Navbar = ({}) => {
   return (
     <div className="bg-black text-white p-6 sticky top-0 z-10 border-b-2 border-blue-500">
       <div
Index: .eslintrc.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n  \"extends\": [\"next/core-web-vitals\", \"next/typescript\"]\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.eslintrc.json b/.eslintrc.json
--- a/.eslintrc.json	(revision fcf8b49156513da7a880815252a5d7d766b96cd8)
+++ b/.eslintrc.json	(date 1736877196565)
@@ -1,3 +1,6 @@
 {
-  "extends": ["next/core-web-vitals", "next/typescript"]
+  "extends": ["next/core-web-vitals", "next/typescript"],
+  "rules": {
+    "@typescript-eslint/no-explicit-any": "off"
+  }
 }
Index: next.config.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import type { NextConfig } from \"next\";\n\nconst nextConfig: NextConfig = {\n  /* config options here */\n};\n\nexport default nextConfig;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/next.config.ts b/next.config.ts
--- a/next.config.ts	(revision fcf8b49156513da7a880815252a5d7d766b96cd8)
+++ b/next.config.ts	(date 1736877352800)
@@ -2,6 +2,18 @@
 
 const nextConfig: NextConfig = {
   /* config options here */
+  webpack: (config, { isServer }) => {
+    if (!isServer) {
+      // Prevent bundling server-side libraries on the client
+      config.resolve.alias['mongodb'] = false;
+      config.resolve.alias['mongoose'] = false;
+    }
+    return config;
+  },
+  eslint: {
+    ignoreDuringBuilds: true,
+  },
+
 };
 
 export default nextConfig;
Index: app/api/admin/subjects/teacher/add/[...teacherId]/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//add new subject\n\nimport dbConnect from \"../../../../../../../lib/connectDb\";\nimport {getServerSession, User} from \"next-auth\";\nimport {authOptions} from \"../../../../../(auth)/auth/[...nextauth]/options\";\nimport {NextResponse} from \"next/server\";\nimport mongoose from \"mongoose\";\nimport {ResourceModel, SubjectModel, Teacher, TeacherModel} from \"../../../../../../../model/User\";\n\nexport async function POST(req: Request, { params }: { params: { teacherId: string[] } }) {\n  try {\n    await dbConnect();\n\n    const session = await getServerSession(authOptions);\n    const user: User = session?.user as User;\n\n    if (!session || !user) {\n      return NextResponse.json({error: 'Unauthorized. User must be logged in.'}, {status: 401});\n    }\n\n    if (!user.isAdmin) {\n      return NextResponse.json(\n        {error: 'User is not admin'},\n        {status: 401}\n      );\n    }\n\n    const { subject_code, subject_name} = await req.json()\n\n    if (!subject_code || !subject_name) {\n      return NextResponse.json(\n        {error: \"Subject code and name is required\"},\n        {status: 403}\n      )\n    }\n    const { teacherId } = await params;\n\n    if (!teacherId.length) {\n      return NextResponse.json(\n        {error: 'No teacher id found.'},\n        {status: 400}\n      );\n    }\n\n    if (!mongoose.Types.ObjectId.isValid(teacherId[0])) {\n      return NextResponse.json(\n        {error: 'Invalid teacher id'},\n        {status: 400}\n      );\n    }\n\n    const teacherObjectId = new mongoose.Types.ObjectId(teacherId[0]);\n\n    const teacher = await TeacherModel.updateOne(\n      { _id: teacherObjectId },\n      {  $addToSet: { subjectTeaching: {subject_name, subject_code} } }\n    );\n\n    if (!teacher.modifiedCount) {\n      return NextResponse.json(\n        {error: 'Failed to update teacher'},\n        {status: 404}\n      )\n    }\n\n    const subject = await SubjectModel.create({\n      subjectId: subject_code\n    })\n\n    if (!subject) {\n      return NextResponse.json(\n        {error: \"Failed to create subject\"},\n        {status: 500}\n      )\n    }\n\n    const resource = await ResourceModel.create({\n      subjectId: subject_code,\n      files: []\n    })\n\n    if (!resource) {\n      return NextResponse.json(\n        {error: \"Failed to create resource\"},\n        {status: 500}\n      )\n    }\n\n    return NextResponse.json({status: 200});\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json(\n      { error: 'Internal Server Error' },\n      { status: 500 }\n    );\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/api/admin/subjects/teacher/add/[...teacherId]/route.ts b/app/api/admin/subjects/teacher/add/[...teacherId]/route.ts
--- a/app/api/admin/subjects/teacher/add/[...teacherId]/route.ts	(revision fcf8b49156513da7a880815252a5d7d766b96cd8)
+++ b/app/api/admin/subjects/teacher/add/[...teacherId]/route.ts	(date 1736877067634)
@@ -5,7 +5,7 @@
 import {authOptions} from "../../../../../(auth)/auth/[...nextauth]/options";
 import {NextResponse} from "next/server";
 import mongoose from "mongoose";
-import {ResourceModel, SubjectModel, Teacher, TeacherModel} from "../../../../../../../model/User";
+import {ResourceModel, SubjectModel, TeacherModel} from "../../../../../../../model/User";
 
 export async function POST(req: Request, { params }: { params: { teacherId: string[] } }) {
   try {
Index: app/api/admin/clubs/add-club/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {NextRequest, NextResponse} from \"next/server\";\nimport dbConnect from \"../../../../../lib/connectDb\";\nimport {getServerSession, User} from \"next-auth\";\nimport {authOptions} from \"../../../(auth)/auth/[...nextauth]/options\";\nimport mongoose from \"mongoose\";\nimport {ClubModel, StudentModel} from \"../../../../../model/User\";\n\nexport async function POST(req: NextRequest) {\n  try {\n    await dbConnect();\n\n    const session = await getServerSession(authOptions);\n    const user: User = session?.user as User;\n\n    if (!session || !user) {\n      return NextResponse.json({ error: 'Unauthorized. User must be logged in.' }, { status: 401 });\n    }\n\n    if (!user.isAdmin) {\n      return NextResponse.json(\n        { error: 'User is not admin' },\n        { status: 401 }\n      );\n    }\n\n    const {clubName, clubLogo, clubIdSecs, clubMembers} = await req.json();\n\n    if (!clubName || !clubLogo || !clubIdSecs.length) {\n      return NextResponse.json(\n        { error: 'Data missing' },\n        { status: 403 }\n      );\n    }\n\n    const club = await ClubModel.create({\n      clubName,\n      clubLogo,\n      clubIdSecs,\n      clubMembers,\n      clubEvents: []\n    })\n\n    if (!club) {\n      return NextResponse.json(\n        { error: 'Failed to create clubs' },\n        { status: 500 }\n      );\n    }\n\n    const secysUpdate = await StudentModel.updateMany(\n      { student_id: { $in: clubIdSecs } },\n      { $addToSet: { clubsHeadOf: club._id } }\n    );\n\n    if (!secysUpdate.modifiedCount) {\n      return NextResponse.json(\n        { error: \"Failed to add club to secys\" },\n        { status: 500 }\n      );\n    }\n\n    const membersUpdate = await StudentModel.updateMany(\n      { student_id: { $in: clubMembers } },\n      { $addToSet: { clubsPartOf: club._id } }\n    );\n\n    if (!membersUpdate.modifiedCount) {\n      return NextResponse.json(\n        { error: \"Failed to add club to members\" },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json(club, {status: 200});\n\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json(\n      { error: 'Internal Server Error' },\n      { status: 500 }\n    );\n  }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/api/admin/clubs/add-club/route.ts b/app/api/admin/clubs/add-club/route.ts
--- a/app/api/admin/clubs/add-club/route.ts	(revision fcf8b49156513da7a880815252a5d7d766b96cd8)
+++ b/app/api/admin/clubs/add-club/route.ts	(date 1736877055420)
@@ -2,7 +2,6 @@
 import dbConnect from "../../../../../lib/connectDb";
 import {getServerSession, User} from "next-auth";
 import {authOptions} from "../../../(auth)/auth/[...nextauth]/options";
-import mongoose from "mongoose";
 import {ClubModel, StudentModel} from "../../../../../model/User";
 
 export async function POST(req: NextRequest) {
Index: app/(auth)/verify-sid/[username]/page.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>'use client';\n\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useRouter, useParams } from 'next/navigation';\nimport { CldUploadButton } from 'next-cloudinary';\nimport { signOut } from 'next-auth/react';\nimport { Upload, User, Lock, Check } from 'lucide-react';\n\nconst SIDVerificationPage = () => {\n  const { username } = useParams();\n  const router = useRouter();\n  const [image, setImage] = useState<string | null>(null);\n  const [message, setMessage] = useState<string>('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleImageUpload = (result: any) => {\n    if (result.event === 'success') {\n      setImage(result.info.secure_url);\n    }\n  };\n\n  const handleSubmit = async () => {\n    if (!username || !image) {\n      setMessage('User ID or Image is missing.');\n      return;\n    }\n\n    setIsLoading(true);\n    \n    try {\n      const response = await axios.post(`${process.env.NEXT_PUBLIC_BACKEND_URL}/api/verify-sid/`, {\n        username,\n        image,\n      });\n\n      if (response.data.success) {\n        setMessage(response.data.message);\n        await signOut();\n        router.replace('/auth/sign-in');\n      } else {\n        setMessage(response.data.message);\n      }\n    } catch (error) {\n      console.error('Error verifying user:', error);\n      setMessage('Error verifying user.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-white flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-2xl bg-white rounded-2xl border border-gray-200 shadow-lg\">\n        <div className=\"p-8 space-y-8\">\n          {/* Header */}\n          <div className=\"text-center\">\n            <h1 className=\"text-3xl font-bold text-blue-500 mb-2\">\n              SID Verification\n            </h1>\n            <Lock className=\"mx-auto w-12 h-12 text-gray-600\" />\n          </div>\n\n          {/* Form Content */}\n          <div className=\"space-y-6\">\n            {/* Upload Section */}\n            <div className=\"space-y-2\">\n              <CldUploadButton\n                uploadPreset={process.env.NEXT_PUBLIC_CLOUDNARY_UPLOAD_PRESET as string}\n                onSuccess={handleImageUpload}\n                className=\"w-full py-4 px-6 rounded-xl bg-blue-500 hover:bg-blue-600 transition-all duration-300 text-white flex items-center justify-center gap-3\"\n              >\n                <Upload className=\"w-6 h-6\" />\n                <span className=\"font-semibold\">Upload Image</span>\n              </CldUploadButton>\n              \n              {image && (\n                <div className=\"flex items-center gap-2 text-green-600 bg-green-50 p-3 rounded-lg\">\n                  <Check className=\"w-5 h-5\" />\n                  <span>Image successfully uploaded</span>\n                </div>\n              )}\n            </div>\n\n            {/* Username Field */}\n            <div className=\"relative\">\n              <div className=\"flex items-center gap-4 p-4 rounded-xl border border-gray-200 bg-gray-50\">\n                <User className=\"w-6 h-6 text-gray-600\" />\n                <input\n                  type=\"text\"\n                  value={username || ''}\n                  disabled\n                  className=\"w-full bg-transparent border-none text-gray-700 focus:ring-0\"\n                />\n              </div>\n            </div>\n\n            {/* Submit Button */}\n            <button\n              onClick={handleSubmit}\n              disabled={isLoading}\n              className=\"w-full py-4 rounded-xl bg-blue-500 hover:bg-blue-600 transition-all duration-300 font-semibold text-white shadow-sm disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {isLoading ? (\n                <div className=\"flex items-center justify-center gap-2\">\n                  <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                  <span>Verifying...</span>\n                </div>\n              ) : (\n                'Verify Identity'\n              )}\n            </button>\n          </div>\n\n          {/* Error Message */}\n          {message && (\n            <div className=\"text-center p-4 rounded-lg bg-red-50 text-red-600\">\n              {message}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SIDVerificationPage;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/(auth)/verify-sid/[username]/page.tsx b/app/(auth)/verify-sid/[username]/page.tsx
--- a/app/(auth)/verify-sid/[username]/page.tsx	(revision fcf8b49156513da7a880815252a5d7d766b96cd8)
+++ b/app/(auth)/verify-sid/[username]/page.tsx	(date 1736877441015)
@@ -1,6 +1,6 @@
 'use client';
 
-import { useEffect, useState } from 'react';
+import { useState } from 'react';
 import axios from 'axios';
 import { useRouter, useParams } from 'next/navigation';
 import { CldUploadButton } from 'next-cloudinary';
Index: components/navbar/Avatar.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from \"react\";\r\nimport Image from \"next/image\";\r\nimport { FaUserCircle } from \"react-icons/fa\";\r\nfunction Avatar() {\r\n  return (\r\n    <div>\r\n      {/* <Image\r\n        className=\"rounded-full\"\r\n        height=\"30\"\r\n        width=\"30\"\r\n        alt=\"Avatar\"\r\n        src=\"\"\r\n      /> */}\r\n      <FaUserCircle />\r\n    </div>\r\n    //Get user info and store the user icon in place of src\r\n  );\r\n}\r\n\r\nexport default Avatar;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/components/navbar/Avatar.tsx b/components/navbar/Avatar.tsx
--- a/components/navbar/Avatar.tsx	(revision fcf8b49156513da7a880815252a5d7d766b96cd8)
+++ b/components/navbar/Avatar.tsx	(date 1736877538032)
@@ -1,5 +1,4 @@
 import React from "react";
-import Image from "next/image";
 import { FaUserCircle } from "react-icons/fa";
 function Avatar() {
   return (
Index: app/api/study-requests/my-requests/accept/[studyRequestId]/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import dbConnect from \"@/lib/connectDb\";\nimport {getServerSession, User} from \"next-auth\";\nimport {authOptions} from \"@/app/api/(auth)/auth/[...nextauth]/options\";\nimport {NextResponse} from \"next/server\";\nimport mongoose from \"mongoose\";\nimport {AcceptedStudyRequestModel, RequestToTeachModel, StudyRequestModel} from \"@/model/User\";\nimport {uuidV4} from \"mongodb/src/utils\";\n\nexport async function PATCH(req: Request, { params }: { params: { studyRequestId: string[] } }) {\n  try {\n    console.log(\"here\");\n    await dbConnect();\n\n    const session = await getServerSession(authOptions);\n    const user: User = session?.user as User;\n\n    if (!session || !user) {\n      return NextResponse.json({ error: 'Unauthorized. User must be logged in.' }, { status: 401 });\n    }\n    const userId = new mongoose.Types.ObjectId(user._id);\n\n    const { studyRequestId } = await params;\n\n    if (!studyRequestId || studyRequestId.length < 2) {\n      return NextResponse.json(\n        { error: 'Study request id not found.' },\n        { status: 403}\n      );\n    }\n\n    if (!mongoose.Types.ObjectId.isValid(studyRequestId[0]) || !mongoose.Types.ObjectId.isValid(studyRequestId[1])) {\n      return NextResponse.json(\n        { error: 'Study request id not valid.' },\n        { status: 403 }\n      );\n    }\n\n    const studyRequestObjectId = new mongoose.Types.ObjectId(studyRequestId[0]);\n    const requestToTeachObjectId = new mongoose.Types.ObjectId(studyRequestId[1]);\n\n    const { phoneNumber } = await req.json();\n\n    if (!phoneNumber) {\n      return NextResponse.json(\n        { error: 'Phone number not found' },\n        {status: 403}\n      )\n    }\n\n    const studyRequest = await StudyRequestModel.findOne({ _id: studyRequestObjectId, user_id: userId });\n\n    if (!studyRequest) {\n      return NextResponse.json(\n        {error: \"failed to find study request.\"},\n        {status: 500}\n      )\n    }\n\n    const requestToTeach = await RequestToTeachModel.findOne({ _id: requestToTeachObjectId });\n\n    if (!requestToTeach) {\n      return NextResponse.json(\n        {error: \"failed to find request to teach.\"},\n        {status: 500}\n      )\n    }\n\n    const acceptedStudyRequest = await AcceptedStudyRequestModel.create({\n      studentId: studyRequest.user_id,\n      teacherId: requestToTeach.user_id,\n      subjectId: studyRequest.subjectId,\n      subjectName: studyRequest.subjectName,\n      description: studyRequest.description,\n      studentAttachments: studyRequest.attachments,\n      teacherAttachments: requestToTeach.attachments,\n      teacherPhoneNumber: requestToTeach.phoneNumber,\n      studentPhoneNumber: phoneNumber,\n      roomId: uuidV4(),\n    })\n\n    if (!acceptedStudyRequest) {\n      return NextResponse.json(\n        {error: \"failed to accept study request.\"},\n        {status: 500}\n      )\n    }\n\n    await RequestToTeachModel.deleteMany({studyRequestId: studyRequestObjectId});\n    await StudyRequestModel.deleteOne({_id: studyRequestObjectId});\n\n    return NextResponse.json({status: 200});\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: 'An error occurred while updating study request.' }, { status: 500 });\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/api/study-requests/my-requests/accept/[studyRequestId]/route.ts b/app/api/study-requests/my-requests/accept/[studyRequestId]/route.ts
--- a/app/api/study-requests/my-requests/accept/[studyRequestId]/route.ts	(revision fcf8b49156513da7a880815252a5d7d766b96cd8)
+++ b/app/api/study-requests/my-requests/accept/[studyRequestId]/route.ts	(date 1736876219792)
@@ -4,11 +4,10 @@
 import {NextResponse} from "next/server";
 import mongoose from "mongoose";
 import {AcceptedStudyRequestModel, RequestToTeachModel, StudyRequestModel} from "@/model/User";
-import {uuidV4} from "mongodb/src/utils";
+import { randomUUID as uuidV4 } from 'crypto';
 
 export async function PATCH(req: Request, { params }: { params: { studyRequestId: string[] } }) {
   try {
-    console.log("here");
     await dbConnect();
 
     const session = await getServerSession(authOptions);
Index: components/ui/calendar.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import * as React from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { DayPicker, CustomComponents } from \"react-day-picker\";\nimport { cn } from \"../../lib/utils\";\nimport { buttonVariants } from \"../../components/ui/button\";\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-gray-500 rounded-md w-9 font-normal text-[0.8rem] dark:text-gray-400\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside: \"text-gray-500 opacity-50 dark:text-gray-400\",\n        day_disabled: \"text-gray-500 opacity-50 dark:text-gray-400\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Calendar }
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/components/ui/calendar.tsx b/components/ui/calendar.tsx
--- a/components/ui/calendar.tsx	(revision fcf8b49156513da7a880815252a5d7d766b96cd8)
+++ b/components/ui/calendar.tsx	(date 1736877046058)
@@ -1,6 +1,5 @@
 import * as React from "react";
-import { ChevronLeft, ChevronRight } from "lucide-react";
-import { DayPicker, CustomComponents } from "react-day-picker";
+import { DayPicker } from "react-day-picker";
 import { cn } from "../../lib/utils";
 import { buttonVariants } from "../../components/ui/button";
 
Index: app/page.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"use client\";\n\nimport {useSession} from \"next-auth/react\";\nimport AdminHomePage from \"@/components/homepage/admin\";\nimport TeacherHomePage from \"@/components/homepage/teacher\";\nimport StudentHomePage from \"@/components/homepage/student\";\n\nexport default function HomePage() {\n  const session= useSession();\n\n  if (session.data && !session.data.user.isStudent) {\n    if (session.data.user.isAdmin) {\n      return (\n        <AdminHomePage />\n      )\n    } else if (session.data.user.isTeacher) {\n      return (\n        <TeacherHomePage />\n      )\n    } else {\n      return (\n        <>\n          <div>\n            wait for admin verification\n          </div>\n        </>\n      )\n    }\n  }\n\n  return <StudentHomePage />\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/page.tsx b/app/page.tsx
--- a/app/page.tsx	(revision fcf8b49156513da7a880815252a5d7d766b96cd8)
+++ b/app/page.tsx	(date 1736873715506)
@@ -20,8 +20,8 @@
     } else {
       return (
         <>
-          <div>
-            wait for admin verification
+          <div className="min-h-screen bg-gradient-to-b from-gray-900 via-gray-800 to-black text-white">
+            <div className="text-blue-500 text-4xl text-center font-bold pt-8">Wait for admin verification</div>
           </div>
         </>
       )
Index: app/api/aichatbot/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import dbConnect from \"../../../lib/connectDb\";\nimport { authOptions } from \"../(auth)/auth/[...nextauth]/options\";\nimport { QdrantClient } from '@qdrant/js-client-rest';\nimport mongoose from \"mongoose\";\nimport { NextResponse } from \"next/server\";\nimport { getServerSession, User } from \"next-auth\";\nimport { Student, StudentModel, TeacherModel, aiChatBotModel } from \"../../../model/User\";\nimport { ObjectId } from \"bson\";\nimport { RecursiveCharacterTextSplitter } from \"langchain/text_splitter\";\nimport { GoogleGenerativeAIEmbeddings } from \"@langchain/google-genai\";\nimport Groq from 'groq-sdk';\n\nif (!process.env.GOOGLE_API_KEY || !process.env.QDRANT_URL || !process.env.QDRANT_API_KEY) {\n  throw new Error('Required environment variables are not defined');\n}\n\nconst groqClient = new Groq({\n  apiKey: process.env.GROQ_API_KEY,\n});\n\nconst qdrantClient = new QdrantClient({\n  url: process.env.QDRANT_URL,\n  apiKey: process.env.QDRANT_API_KEY,\n});\n\nconst embeddings = new GoogleGenerativeAIEmbeddings({\n  apiKey: process.env.GOOGLE_API_KEY,\n  model: \"text-embedding-004\",\n});\n\n// Helper function to classify queries\nconst classifyQuery = async (query: string): Promise<string> => {\n  // const queryLower = query.toLowerCase();\n  // const categories = {\n  //   marks: ['marks', 'exam', 'quiz', 'midsem', 'endsem', 'practical', 'score', 'result', 'grade', 'percentage', 'subject', 'course', 'gradebook', 'gpa', 'cgpa'],\n  //   events: ['event', 'club', 'workshop', 'fest', 'competition', 'seminar', 'meetup', 'activity', 'schedule', 'venue', 'date', 'time', 'host', 'organizer', 'participation', 'registration'],\n  //   general: ['information', 'college', 'timing', 'library', 'administration', 'contact', 'schedule', 'chat', 'help', 'bot', 'assistant', 'chatbot']\n  // };\n\n  // for (const [category, keywords] of Object.entries(categories)) {\n  //   if (keywords.some(keyword => queryLower.includes(keyword))) {\n  //     return category;\n  //   }\n  // }\n  // return 'general';\n\n  const prompt = `I am providing you a query, based on the query your work is detect whether that is related to marks, events or general information. \\n\\nQuery: ${query} \\n\\nPlease type marks, events or general based on the query. \\n\\nPlease type only one of the three words and dont type any other text. \\n\\nIf you are not sure, you can type general.`;\n\n  const completion = await groqClient.chat.completions.create({\n  messages: [{ role: 'user', content: prompt }],\n  model: 'llama3-8b-8192',\n  });\n  const category = completion.choices[0]?.message?.content;\n  console.log(category);\n  return category || 'general';\n};\n\nconst ensureCollection = async (\n  collectionName: string,\n  vectorSize: number\n): Promise<void> => {\n  if (!collectionName || !vectorSize) {\n    throw new Error('Collection name and vector size are required');\n  }\n\n  const maxRetries = 3;\n  let currentTry = 0;\n\n  while (currentTry < maxRetries) {\n    try {\n      try {\n        const collection = await qdrantClient.getCollection(collectionName);\n        console.log(`Collection ${collectionName} exists with config:`, collection);\n        \n        // Validate vector size matches\n        if (!collection.config.params.vectors || collection.config.params.vectors.size === undefined || collection.config.params.vectors.size !== vectorSize) {\n          throw new Error(`Vector size mismatch. Expected: ${vectorSize}, Got: ${collection.config.params.vectors?.size}`);\n        }\n        return;\n      } catch (error: any) {\n        if (error.status !== 404) {\n          throw error;\n        }\n      }\n\n      const collectionConfig = {\n        vectors: {\n          size: vectorSize,\n          distance: 'Cosine' as const,\n        },\n        optimizers_config: {\n          default_segment_number: 2,\n        },\n        replication_factor: 2,\n        write_consistency_factor: 1, \n      };\n\n      await qdrantClient.createCollection(collectionName, collectionConfig);\n      console.log(`Created new collection: ${collectionName}`);\n      \n      // Validate collection was created\n      await new Promise(resolve => setTimeout(resolve, 2000)); // Wait longer\n      const newCollection = await qdrantClient.getCollection(collectionName);\n      \n      if (!newCollection) {\n        throw new Error('Collection creation verification failed');\n      }\n      \n      return;\n    } catch (error: any) {\n      currentTry++;\n      console.error(`Attempt ${currentTry}/${maxRetries} failed:`, error);\n      \n      if (currentTry === maxRetries) {\n        throw new Error(`Collection creation failed after ${maxRetries} attempts: ${error.message || 'Unknown error'}`);\n      }\n      \n      await new Promise(resolve => setTimeout(resolve, Math.pow(2, currentTry) * 1000));\n    }\n  }\n};\n\nconst validateQdrantConnection = async (): Promise<void> => {\n  try {\n    await qdrantClient.getCollections();\n  } catch (error: any) {\n    throw new Error(`Failed to connect to Qdrant: ${error.message || 'Unknown error'}`);\n  }\n};\n\nconst createVectorStore = async (\n  text: string,\n  collectionName: string\n): Promise<void> => {\n  // Validate inputs\n  if (!text?.trim()) {\n    throw new Error('No text provided for vector store creation');\n  }\n\n  await validateQdrantConnection();\n\n  const textSplitter = new RecursiveCharacterTextSplitter({\n    chunkSize: 1000,\n    chunkOverlap: 200,\n  });\n\n  const documentTexts = await textSplitter.splitText(text);\n  \n  if (!documentTexts.length) {\n    throw new Error('No text chunks generated');\n  }\n\n  const embeds = await Promise.all(\n    documentTexts.map(text => embeddings.embedQuery(text))\n  );\n\n  if (!embeds.length || !embeds[0].length) {\n    throw new Error('Failed to generate embeddings');\n  }\n\n  await ensureCollection(collectionName, embeds[0].length);\n\n  const points = documentTexts.map((text, i) => ({\n    id: Date.now() + i, \n    vector: Array.from(embeds[i]),\n    payload: { \n      text: text.trim(),\n      timestamp: new Date().toISOString(),\n      chunkIndex: i\n    }\n  }));\n\n  const batchSize = 10; \n  for (let i = 0; i < points.length; i += batchSize) {\n    const batch = points.slice(i, i + batchSize);\n    let retries = 3;\n    while (retries > 0) {\n      try {\n        await qdrantClient.upsert(collectionName, {\n          points: batch,\n          wait: true\n        });\n        console.log(`Successfully uploaded batch ${i/batchSize + 1}/${Math.ceil(points.length/batchSize)}`);\n        break;\n      } catch (error) {\n        retries--;\n        console.error(`Batch upload failed, ${retries} retries left:`, error);\n        if (retries === 0) throw error;\n        await new Promise(resolve => setTimeout(resolve, 2000));\n      }\n    }\n  }\n};\n\nconst getBotResponse = async (\n  userInput: string,\n  collectionName: string,\n  fallbackResponse: string\n): Promise<string> => {\n  try {\n    const queryEmbed = await embeddings.embedQuery(userInput);\n    \n    try {\n      const searchResults = await qdrantClient.search(collectionName, {\n        vector: Array.from(queryEmbed),\n        limit: 3,\n      });\n\n      if (!searchResults.length) {\n        return fallbackResponse;\n      }\n\n      const context = searchResults\n        .map(hit => hit.payload?.text || '')\n        .join(\" \");\n\n      const prompt = `You are a helpful academic assistant for a college website which assits students and teachers for their day to day college related queries. \n                     Based on this context: \"${context}\", \n                     please answer this question: \"${userInput}\". \n                     If the context is about marks, provide only the student's marks, name, roll number, \n                     and subject details.\n                     For events, include the hosting club, venue, date/time, \n                     and a brief description and the link to the event (max 100 words).\n                     If the context is about general information, provide a brief description of the topic.`;\n\n      const completion = await groqClient.chat.completions.create({\n        messages: [{ role: 'user', content: prompt }],\n        model: 'llama3-8b-8192',\n      });\n      return completion.choices[0]?.message?.content || fallbackResponse;\n    } catch (error) {\n      console.error('Search error:', error);\n      return fallbackResponse;\n    }\n  } catch (error) {\n    console.error('Bot response error:', error);\n    return fallbackResponse;\n  }\n};\n\nconst processUserInput = (userInput: string, wordToReplace: string, replacementWord: string) => {\n  // Use a regular expression to match the word with word boundaries\n  const regex = new RegExp(`\\\\b${wordToReplace}\\\\b`, 'gi');\n  // Replace the word if found\n  const modifiedInput = userInput.replace(regex, replacementWord);\n  return modifiedInput;\n};\n\nconst classifySID = (userInput: string, student: Student | null): boolean => {\n  const userTryingSid = student?.student_id?.toString(); // Convert ObjectId to string\n  const userTryingName = String(student?.name).toLowerCase(); // Normalize name\n  const queryLower = userInput.toLowerCase(); // Normalize input\n\n  console.log('Processed userInput:', queryLower);\n  console.log('Converted student_id:', userTryingSid);\n  console.log('Converted student name:', userTryingName);\n\n  const categories = {\n    sid: [userTryingSid],\n    name: [userTryingName],\n  };\n\n  for (const [category, keywords] of Object.entries(categories)) {\n    console.log(`Checking category: ${category}, keywords: ${keywords}`);\n    if (keywords.some(keyword => keyword && queryLower.includes(keyword))) {\n      console.log('Match found in category:', category);\n      return true;\n    }\n  }\n\n  console.error('No match found for userInput.');\n  return false;\n};\nexport async function POST(request: Request) {\n  try {\n    await dbConnect();\n    const session = await getServerSession(authOptions);\n    \n    if (!session?.user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const userId = new mongoose.Types.ObjectId(session.user._id);\n    const student = await StudentModel.findOne({ user_id: userId });\n    const teacher = await TeacherModel.findOne({ user_id: userId });\n    const Username = student?.name;\n\n    let { userInput } = await request.json();\n    const updatedInput = processUserInput(userInput, 'my', Username?.toLowerCase() || 'student'); \n    userInput = updatedInput;\n\n    const category = await classifyQuery(userInput);\n    if (category === 'marks' && !teacher) {\n      const isUserOwner = classifySID(userInput, student);\n      console.log(\"Category:\", isUserOwner);\n      if(isUserOwner === false){\n        const response = 'You are not allowed to see results of other students\\n \uD83D\uDCA0 Incase you are trying to find your own result, make sure there is no typo in the Name or Student ID you are providin in the query \uD83D\uDCA0';\n        return NextResponse.json(response, { status: 200 });\n      }\n    }\n    const categoryConfig = {\n      events: {\n        id: '676d8bf49e48cdfb0b216f3f',\n        fallback: 'I could not find specific event information. Please try asking about a specific event.',\n        getText: (info: any) => info?.Info?.events?.map((e: any) => \n          `Event: ${e.title}\\nDescription: ${e.description}`\n        ).join('\\n') || ''\n      },\n      marks: {\n        id: '676da65f9e48cdfb0b216f48',\n        fallback: 'I could not find your marks information. Please specify the subject or exam.',\n        getText: (info: any) => info?.Info?.marks?.map((m: any) =>\n          `Subject: ${m.subject}\\nMarks: ${m.marks}`\n        ).join('\\n') || ''\n      },\n      general: {\n        id: '676da9b09e48cdfb0b216f49',\n        fallback: 'I could not find that specific information. Please try asking a more specific question.',\n        getText: (info: any) => info?.Info?.general?.map((g: any) =>\n          `${g.subject}: ${g.description}`\n        ).join('\\n') || ''\n      }\n    };\n\n    const config = categoryConfig[category as keyof typeof categoryConfig];\n    const info = await aiChatBotModel.findById(new ObjectId(config.id));\n    \n    if (!info) {\n      return NextResponse.json(\n        { error: 'Information not found' },\n        { status: 404 }\n      );\n    }\n\n    const text = config.getText(info);\n    \n    try {\n      await createVectorStore(text, category);\n      const response = await getBotResponse(userInput, category, config.fallback);\n      return NextResponse.json( response , { status: 200 });\n    } catch (error) {\n      console.error('Processing error:', error);\n      return NextResponse.json(\n        { response: config.fallback },\n        { status: 500 }\n      );\n    }\n\n  } catch (error) {\n    console.error('API route error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/api/aichatbot/route.ts b/app/api/aichatbot/route.ts
--- a/app/api/aichatbot/route.ts	(revision fcf8b49156513da7a880815252a5d7d766b96cd8)
+++ b/app/api/aichatbot/route.ts	(date 1736877123240)
@@ -3,7 +3,7 @@
 import { QdrantClient } from '@qdrant/js-client-rest';
 import mongoose from "mongoose";
 import { NextResponse } from "next/server";
-import { getServerSession, User } from "next-auth";
+import { getServerSession } from "next-auth";
 import { Student, StudentModel, TeacherModel, aiChatBotModel } from "../../../model/User";
 import { ObjectId } from "bson";
 import { RecursiveCharacterTextSplitter } from "langchain/text_splitter";
Index: model/User.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import mongoose, { Schema, Document, Model } from \"mongoose\";\nimport { v4 as uuidv4 } from 'uuid'\n\nexport interface User extends Document {\n    username: string;\n    email: string;\n    password: string;\n    verifyCode: string;\n    verifyCodeExpiry: Date;\n    isVerified: boolean;\n    isStudent:boolean\n    isTeacher: boolean;\n    isAdmin: boolean;\n    reqTeacher: boolean;\n    reqAdmin: boolean;\n    sid_verification:boolean;\n}\n\nconst UserSchema: Schema<User> = new Schema({\n    username: {\n        type: String,\n        required: [true, 'username is required'],\n        unique: true,\n    },\n    email: {\n        type: String,\n        required: [true, 'email is required'],\n        unique: true,\n        match: [/^[a-zA-Z0-9._%+-]+@pec\\.edu\\.in$/, 'please use college email id'],\n    },\n    password: {\n        type: String,\n        required: [true, \"Password is required\"],\n    },\n    verifyCode: {\n        type: String,\n        required: [true, 'Verification Code is required'],\n    },\n    verifyCodeExpiry: {\n        type: Date,\n        required: [true, 'Expiry is required'],\n    },\n    isVerified: {\n        type: Boolean,\n        default: false,\n    },\n    isStudent: {\n        type: Boolean,\n        default: false,\n    },\n    isTeacher: {\n        type: Boolean,\n        default: false, // Default to false, only true if admin updates the field\n    },\n    isAdmin: {\n        type: Boolean,\n        default: false,\n    },\n    reqTeacher: {\n        type: Boolean,\n        default: false,\n    },\n    reqAdmin: {\n        type: Boolean,\n        default: false,\n    },\n    sid_verification:{\n        type:Boolean,\n        default:false,\n    }\n});\n\nUserSchema.post(\"save\", async function (this: User) {\n    if (this.isStudent) {\n        \n        try {\n            const existingStudent = await StudentModel.findOne({ user_id: this._id });\n            if (existingStudent) {\n                console.log(`Student with user_id ${this._id} already exists.`);\n                return; \n            }\n            const studentId = `S-${uuidv4()}`;\n            const newStudent = new StudentModel({\n                user_id: this._id,\n                email:this.email,\n                name: this.username,\n                student_id: studentId,\n                semester: 1,\n                branch: \"Unknown\",\n                sid_verification: this.sid_verification,\n                enrolledSubjectId: [],\n                teacherSubjectMap: {},\n                attendanceSubjectMap: {},\n                clubsPartOf: [],\n                interestedEvents: [],\n                clubsHeadOf: [],\n                profile: \"\",\n                friends: []\n            });\n\n            await newStudent.save();\n        } catch (error) {\n            console.error(\"Error creating student:\", error);\n        }\n    }\n\n    if (this.reqTeacher) {\n        try {\n            const alreadyRequested = await RequestModel.findOne({user_id: this._id})\n\n            if (alreadyRequested) {\n                console.log(\"already requested for teacher\")\n                return;\n            }\n\n            const request = new RequestModel({\n                user_id: this._id,\n                for_teacher: true,\n                for_admin: false,\n            })\n\n            await request.save();\n        } catch (error) {\n            console.error(\"Error making request for teacher:\", error);\n        }\n    }\n\n    if (this.reqAdmin) {\n        try {\n            const alreadyRequested = await RequestModel.findOne({user_id: this._id})\n\n            if (alreadyRequested) {\n                console.log(\"already requested for admin\")\n                return;\n            }\n\n            const request = new RequestModel({\n                user_id: this._id,\n                for_teacher: false,\n                for_admin: true,\n            })\n\n            await request.save();\n        } catch (error) {\n            console.error(\"Error making request for admin:\", error);\n        }\n    }\n});\n\n\nexport interface Student extends Document {\n    user_id: mongoose.Schema.Types.ObjectId;\n    email?:string;\n    name?:string;\n    avatar?: string;\n    student_id?: string;\n    semester: number;\n    phoneNumber?: number;\n    branch: string;\n    sid_verification: boolean;\n    enrolledSubjectId: string[];\n    subjectTeacherMap: Record<string, mongoose.Schema.Types.ObjectId>;\n    attendanceSubjectMap: Record<number, string>;\n    clubsPartOf: mongoose.Schema.Types.ObjectId[];\n    interestedEvents: mongoose.Schema.Types.ObjectId[];\n    clubsHeadOf: mongoose.Schema.Types.ObjectId[];\n    profile?: string;\n    friends: mongoose.Schema.Types.ObjectId[];\n}\n\n\nconst StudentSchema: Schema<Student> = new Schema({\n    user_id: {\n        type: Schema.Types.ObjectId,\n        ref: \"User\",\n        required: true,\n    },\n    email:{\n        type:String,required:false\n    },\n    name: { type: String, required: true },\n    avatar: { type: String },\n    student_id: { type: String, unique: true },\n    semester: { type: Number, required: true },\n    phoneNumber: { type: Number },\n    branch: { type: String, required: true },\n    sid_verification: { type: Boolean, default: false },\n    enrolledSubjectId: [{ type: String }],\n    subjectTeacherMap: {\n        type: Map,\n        of: Schema.Types.ObjectId,\n    },\n    attendanceSubjectMap: {\n        type: Map,\n        of: String,\n    },\n    clubsPartOf: [{ type: Schema.Types.ObjectId, ref: \"Club\" }],\n    interestedEvents: [{ type: Schema.Types.ObjectId, ref: \"Event\" }],\n    clubsHeadOf: [{ type: Schema.Types.ObjectId, ref: \"Club\" }],\n    profile: {\n        type: String,\n        required: false,\n    },\n    friends: [{ type: Schema.Types.ObjectId, ref: \"Student\" }],\n});\n\n\nexport interface Teacher extends Document {\n    user_id: mongoose.Schema.Types.ObjectId;\n    teacher_id: string;\n    subjectTeaching: {\n        subject_code: string;\n        subject_name: string;\n    }[];\n}\n\nconst TeacherSchema: Schema<Teacher> = new Schema({\n    user_id: {\n        type: Schema.Types.ObjectId,\n        ref: \"User\",\n        required: true,\n    },\n    teacher_id: { type: String, required: true, unique: true },\n    subjectTeaching: [\n        {\n            subject_name: { type: String, required: true },\n            subject_code: { type: String, required: true },\n        },\n    ]\n});\n\nexport interface Club extends Document {\n    clubName: string;\n    clubLogo?: string;\n    clubIdSecs: string[];\n    clubMembers: string[];\n    clubEvents: mongoose.Schema.Types.ObjectId[];\n}\n\nconst ClubSchema: Schema<Club> = new Schema({\n    clubName: { type: String, required: true, unique: true },\n    clubLogo: { type: String },\n    clubIdSecs: [{ type: String, ref: \"Student\" }],\n    clubMembers: [{ type: String, ref: \"Student\" }],\n    clubEvents: [{ type: Schema.Types.ObjectId, ref: \"Event\" }],\n});\nexport interface Event extends Document {\n    eventHostedBy: mongoose.Schema.Types.ObjectId;\n    eventCoordinates: {\n        lat: number;\n        lng: number;\n    };\n    eventVenue: string;\n    eventTime: Date;\n    interestedMembersArr: mongoose.Schema.Types.ObjectId[];\n    eventAttachments?: string[];\n    poster: string;\n    heading: string;\n    description: string;\n    tags: string[];\n}\n\nconst EventSchema: Schema<Event> = new Schema({\n    eventHostedBy: {\n        type: Schema.Types.ObjectId,\n        ref: \"Club\",\n    },\n    eventCoordinates: {\n        lat: { type: Number },\n        lng: { type: Number },\n    },\n    eventVenue: { type: String, required: true },\n    eventTime: { type: Date, required: true },\n    interestedMembersArr: [{ type: Schema.Types.ObjectId, ref: \"Student\" }],\n    eventAttachments: [{ type: String }],\n    poster: { type: String, required: true },\n    heading: { type: String, required: true },\n    description: { type: String, required: true },\n    tags: [{ type: String }],\n});\n\n\n\nexport interface Subject extends Document {\n  subjectId: string;\n  allMarks: {\n    examType: string;\n    studentMarks: {\n      student_id: string;\n      marks: number;\n    }[];\n  }[];\n}\n\nconst SubjectSchema: Schema<Subject> = new Schema({\n    subjectId: { type: String, required: true },\n    allMarks: {\n      type: [\n        {\n          examType: { type: String, required: true },\n          studentMarks: [\n            {\n              student_id: { type: String, required: true },\n              marks: { type: Number, required: true },\n            },\n          ],\n        },\n      ],\n      default: [],\n    },\n  });\n\n\n\nexport interface Attendance extends Document {\n    subjectId: string;\n    teacherId: mongoose.Schema.Types.ObjectId;\n    totalClasses: number;\n    dateStudentMap: {\n        date: string;\n        studentsPresent: string[];\n        lectureCount: number;\n    }[];\n    groupName: string;\n    students: string[];\n}\n\nconst AttendanceSchema: Schema<Attendance> = new Schema({\n    subjectId: { type: String, required: true },\n    teacherId: { type: Schema.Types.ObjectId, ref: \"Teacher\", required: true }, // teacher ki user id\n    totalClasses: { type: Number, required: true },\n    dateStudentMap: [{\n        date: { type: String, required: true },\n        studentsPresent: [{ type: String }],\n        lectureCount: { type: Number, required: true },\n    }],\n    groupName: { type: String, required: true },\n    students: [ { type: String, ref: \"Student\" }],\n});\n\n\ninterface Resource extends Document {\n    subjectId: string;\n    files: {\n        url: string;\n        fileName: string;\n    }[];\n}\n\nconst ResourceSchema: Schema<Resource> = new Schema({\n    subjectId: { type: String, required: true },\n    files: [{\n        url: { type: String, required: true },\n        fileName: { type: String, required: true },\n    }],\n})\n\n\nexport interface Request extends Document {\n    user_id: mongoose.Schema.Types.ObjectId;\n    for_teacher: boolean;\n    for_admin: boolean;\n}\n\nconst RequestSchema: Schema<Request> = new Schema({\n    user_id: {type: Schema.Types.ObjectId, ref: \"User\" },\n    for_teacher: {type: \"boolean\", default: false},\n    for_admin: {type: \"boolean\", default: false},\n})\n\n\n\nexport interface FriendRequest extends Document {\n    from: mongoose.Schema.Types.ObjectId;\n    to: mongoose.Schema.Types.ObjectId;\n}\n\nconst FriendRequestSchema: Schema<FriendRequest> = new Schema({\n    from: {type: Schema.Types.ObjectId, ref: \"Student\" },\n    to: {type: Schema.Types.ObjectId, ref: \"Student\" },\n})\n\n\nexport interface Issue extends Document {\n    title: string;\n    description: string;\n    attachments: string[];\n    author: mongoose.Schema.Types.ObjectId;\n    votes: mongoose.Schema.Types.ObjectId[];\n}\n\nconst IssueSchema: Schema<Issue> = new Schema({\n    title: { type: String, required: true },\n    description: { type: String, required: true },\n    attachments: [{ type: String }],\n    author: { type: Schema.Types.ObjectId, ref: \"Student\" }, //userId\n    votes: [{ type: Schema.Types.ObjectId, ref: \"Student\" }], //userId\n}, {timestamps: true})\n\n\nexport interface StudyRequest extends Document {\n    user_id: mongoose.Schema.Types.ObjectId;\n    subjectId: string;\n    subjectName: string;\n    description: string;\n    attachments: string[];\n    price: number;\n    applied: mongoose.Schema.Types.ObjectId[]; // id of people who applied\n    accepted: boolean;\n}\n\nconst StudyRequestSchema: Schema<StudyRequest> = new Schema({\n    user_id: { type: Schema.Types.ObjectId, ref: \"Student\", required: true },\n    subjectId: { type: String, required: true },\n    subjectName: { type: String, required: true },\n    description: { type: String, required: true },\n    attachments: [{ type: String }],\n    price: { type: Number, required: true },\n    applied: [{ type: Schema.Types.ObjectId }],\n    accepted: { type: Boolean, default: false,  required: true },\n})\n\n\nexport interface RequestToTeach extends Document {\n    studyRequestId: mongoose.Schema.Types.ObjectId;\n    user_id: mongoose.Schema.Types.ObjectId;\n    description: string;\n    attachments: string[];\n    phoneNumber: number;\n}\n\nconst RequestToTeachSchema: Schema<RequestToTeach> = new Schema({\n    studyRequestId: { type: Schema.Types.ObjectId, ref: \"StudyRequest\" },\n    user_id: { type: Schema.Types.ObjectId, ref: \"Student\" },\n    description: { type: String, required: true },\n    attachments: [{ type: String }],\n    phoneNumber: { type: Number, required: true },\n})\n\n\nexport interface AcceptedStudyRequest extends Document {\n    studyRequestId: mongoose.Schema.Types.ObjectId;\n    studentId: mongoose.Schema.Types.ObjectId;\n    teacherId: mongoose.Schema.Types.ObjectId;\n    subjectId: string;\n    subjectName: string;\n    description: string;\n    studentAttachments: string[];\n    teacherAttachments: string[];\n    teacherPhoneNumber: number;\n    studentPhoneNumber: number;\n    roomId: string;\n}\n\nconst AcceptedStudyRequestSchema: Schema<AcceptedStudyRequest> = new Schema({\n    studyRequestId: { type: Schema.Types.ObjectId, ref: \"StudyRequest\", required: true },\n    studentId: { type: Schema.Types.ObjectId, ref: \"Student\" },\n    teacherId: { type: Schema.Types.ObjectId, ref: \"Student\" },\n    subjectId: { type: String, required: true },\n    subjectName: { type: String, required: true },\n    description: { type: String, required: true },\n    studentAttachments: [ { type: String } ],\n    teacherAttachments: [ { type: String } ],\n    teacherPhoneNumber: { type: Number, required: true },\n    studentPhoneNumber: { type: Number, required: true },\n    roomId: { type: String, required: true },\n})\n\nexport interface Announcement extends Document {\n    announcementText: string;\n    department: string;\n}\n\nconst AnnouncementModelSchema: Schema<Announcement> = new Schema({\n    announcementText: { type: String, required: true },\n    department: { type: String, required: true }\n}, {timestamps: true})\n\ninterface Eventai {\n    title: string;\n    description: string;\n}\n\ninterface Markai {\n    subject: string;\n    marks: string;\n}\n\ninterface Generalai {\n    title: string;\n    description: string;\n}\n\ninterface Info {\n    events?: Eventai[];\n    marks?: Markai[];\n    general?: Generalai[];\n}\n\nexport interface AiChatBot extends Document {\n    Info: Info;\n}\n\nconst EventSchemaAI = new Schema<Eventai>({\n    title: { type: String, required: true },\n    description: { type: String, required: true },\n});\n\nconst MarkSchemaAI = new Schema<Markai>({\n    subject: { type: String, required: true },\n    marks: { type: String, required: true },\n});\n\nconst GeneralSchemaAI = new Schema<Generalai>({\n    title: { type: String, required: true },\n    description: { type: String, required: true },\n});\n\nconst AiChatBotSchema: Schema<AiChatBot> = new Schema({\n    Info: {\n        events: [EventSchemaAI],\n        marks: [MarkSchemaAI],\n        general: [GeneralSchemaAI],\n    }},\n    { collection: 'aiChatBot' }\n);\n\nexport interface TeacherAnnouncement extends Document {\n    teacherId: mongoose.Schema.Types.ObjectId;\n    announcementText: string;\n    subjectCode: string;\n}\n\nconst TeacherAnnouncementSchema: Schema<TeacherAnnouncement> = new Schema({\n    teacherId: { type: Schema.Types.ObjectId, ref: \"Teacher\", required: true },\n    announcementText: { type: String, required: true },\n    subjectCode: { type: String, required: true }\n}, {timestamps: true});\n\nconst AnnouncementModel: Model<Announcement> = \n    mongoose.models.Announcement || mongoose.model<Announcement>(\"Announcement\", AnnouncementModelSchema)\n\nconst TeacherAnnouncementModel: Model<TeacherAnnouncement> =\n    mongoose.models.TeacherAnnouncement || mongoose.model<TeacherAnnouncement>(\"TeacherAnnouncement\", TeacherAnnouncementSchema)\n    \nconst aiChatBotModel: Model<AiChatBot> =\n    mongoose.models.aiChatBot || mongoose.model<AiChatBot>(\"aiChatBot\", AiChatBotSchema);\n\nconst UserModel: Model<User> =\n    mongoose.models.User || mongoose.model<User>(\"User\", UserSchema);\n\nconst StudentModel: Model<Student> =\n    mongoose.models.Student || mongoose.model<Student>(\"Student\", StudentSchema);\n\nconst TeacherModel: Model<Teacher> =\n    mongoose.models.Teacher || mongoose.model<Teacher>(\"Teacher\", TeacherSchema);\n\nconst ClubModel: Model<Club> =\n    mongoose.models.Club|| mongoose.model<Club>(\"Club\", ClubSchema);\n\nconst EventModel: Model<Event> =\n    mongoose.models.Event || mongoose.model<Event>(\"Event\", EventSchema);\n\nconst SubjectModel : Model<Subject>=\n    mongoose.models.Subject || mongoose.model<Subject>(\"Subject\",SubjectSchema);\n\nconst AttendanceModel: Model<Attendance> =\n    mongoose.models.Attendance || mongoose.model<Attendance>(\"Attendance\", AttendanceSchema);\n\nconst RequestModel: Model<Request> =\n    mongoose.models.Request || mongoose.model<Request>(\"Request\", RequestSchema);\n\nconst FriendRequestModel: Model<FriendRequest> =\n    mongoose.models.FriendRequest || mongoose.model<FriendRequest>(\"FriendRequest\", FriendRequestSchema);\n\nconst ResourceModel: Model<Resource> =\n    mongoose.models.Resource || mongoose.model<Resource>(\"Resource\", ResourceSchema);\n\nconst IssueModel: Model<Issue> =\n    mongoose.models.Issue || mongoose.model<Issue>(\"Issue\", IssueSchema);\n\nconst StudyRequestModel: Model<StudyRequest> =\n    mongoose.models.StudyRequest || mongoose.model<StudyRequest>(\"StudyRequest\", StudyRequestSchema);\n\nconst RequestToTeachModel: Model<RequestToTeach> =\n    mongoose.models.RequestToTeach || mongoose.model<RequestToTeach>(\"RequestToTeach\", RequestToTeachSchema);\n\nconst AcceptedStudyRequestModel: Model<AcceptedStudyRequest> =\n    mongoose.models.AcceptedStudyRequest || mongoose.model<AcceptedStudyRequest>(\"AcceptedStudyRequest\", AcceptedStudyRequestSchema);\n\nexport {\n    TeacherAnnouncementModel,\n    UserModel,\n    StudentModel,\n    TeacherModel,\n    ClubModel,\n    EventModel,\n    SubjectModel,\n    AttendanceModel,\n    RequestModel,\n    FriendRequestModel,\n    aiChatBotModel,\n    ResourceModel,\n    IssueModel,\n    StudyRequestModel,\n    RequestToTeachModel,\n    AcceptedStudyRequestModel,\n    AnnouncementModel,\n};\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/model/User.ts b/model/User.ts
--- a/model/User.ts	(revision fcf8b49156513da7a880815252a5d7d766b96cd8)
+++ b/model/User.ts	(date 1736876219787)
@@ -1,5 +1,6 @@
 import mongoose, { Schema, Document, Model } from "mongoose";
-import { v4 as uuidv4 } from 'uuid'
+import { randomUUID as uuidv4 } from 'crypto';
+
 
 export interface User extends Document {
     username: string;
Index: lib/embedding.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport { RecursiveCharacterTextSplitter } from \"langchain/text_splitter\";\nimport { QdrantClient } from '@qdrant/js-client-rest';\n\n\n\nif (!process.env.GOOGLE_API_KEY) {\n  throw new Error(\"GOOGLE_API_KEY is not defined\");\n}\n\nconst genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);\n\n// Define types and interfaces\ninterface EmbeddingFunction {\n  (text: string): Promise<number[]>;\n}\n\ninterface QdrantClientInterface {\n  recreateCollection(params: { collection_name: string; vectors_config: VectorParams }): void;\n  uploadCollection(params: { collection_name: string; vectors: number[][]; payload: { text: string }[]; ids: number[] }): Promise<void>;\n}\n\ninterface VectorParams {\n  size: number;\n  distance: Distance;\n}\n\nenum Distance {\n  COSINE = \"Cosine\"\n}\n\n// Embedding function to fetch embeddings from Google Generative AI\nasync function getEmbeddings(text: string): Promise<number[]> {\n  const model = genAI.getGenerativeModel({ model: \"text-embedding-004\" });\n  const result = await model.embedContent(text);\n  return result.embedding.values;\n}\n\n// Middleware function to create a vector store in Qdrant\nasync function createVectorStoreMiddleware(req: any, res: any, next: Function) {\n  const { text, embeddingFunction, qdrantClient, collectionName = \"documents\" } = req.body;\n\n  if (!text || !embeddingFunction || !qdrantClient) {\n    return res.status(400).json({ error: 'Missing required parameters: text, embeddingFunction, or qdrantClient.' });\n  }\n\n  try {\n    // Split text into chunks\n    const textSplitter = new RecursiveCharacterTextSplitter({\n      chunkSize: 1000,\n      chunkOverlap: 200\n    });\n    const documents = await textSplitter.splitText(text);\n\n    // Create embeddings for documents\n    const embeddings = [];\n    for (const doc of documents) {\n      const embedding = await embeddingFunction(doc);\n      embeddings.push(embedding);\n    }\n\n    // Create vector params for the Qdrant collection\n    const vectorSize = embeddings[0].length;\n    qdrantClient.recreateCollection({\n      collection_name: collectionName,\n      vectors_config: { size: vectorSize, distance: Distance.COSINE }\n    });\n\n    // Generate IDs for each document\n    const ids = documents.map((_, index) => index);\n\n    // Upload the vectors and documents into Qdrant\n    await qdrantClient.uploadCollection({\n      collection_name: collectionName,\n      vectors: embeddings,\n      payload: documents.map(doc => ({ text: doc })),\n      ids: ids\n    });\n\n    // Pass control to the next middleware or route handler\n    res.status(200).json({ message: 'Vector store created successfully' });\n\n  } catch (error) {\n    console.error('Error in creating vector store:', error);\n    return res.status(500).json({ error: 'Error in creating vector store' });\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/embedding.ts b/lib/embedding.ts
--- a/lib/embedding.ts	(revision fcf8b49156513da7a880815252a5d7d766b96cd8)
+++ b/lib/embedding.ts	(date 1736877511173)
@@ -1,7 +1,5 @@
 import { GoogleGenerativeAI } from "@google/generative-ai";
 import { RecursiveCharacterTextSplitter } from "langchain/text_splitter";
-import { QdrantClient } from '@qdrant/js-client-rest';
-
 
 
 if (!process.env.GOOGLE_API_KEY) {
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"3d45d623-ee8a-421e-8d0d-07f88c3fd10c\" name=\"Changes\" comment=\"fixup! recovered files\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/components/navbar/Navbar.tsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/components/navbar/Navbar.tsx\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"tsconfig.json\" />\n        <option value=\"TypeScript JSX File\" />\n        <option value=\"TypeScript File\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"css-testing\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n    <option name=\"RESET_MODE\" value=\"MIXED\" />\n  </component>\n  <component name=\"GitHubPullRequestSearchHistory\">{\n  &quot;lastFilter&quot;: {\n    &quot;state&quot;: &quot;OPEN&quot;,\n    &quot;assignee&quot;: &quot;VaibhavVerma27&quot;\n  }\n}</component>\n  <component name=\"GithubPullRequestsUISettings\">{\n  &quot;selectedUrlAndAccountId&quot;: {\n    &quot;url&quot;: &quot;https://github.com/VaibhavVerma27/Ideathon.git&quot;,\n    &quot;accountId&quot;: &quot;2d85c29d-bd34-4650-83c7-ed5abaf2838e&quot;\n  }\n}</component>\n  <component name=\"ProblemsViewState\">\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 5\n}</component>\n  <component name=\"ProjectId\" id=\"2pwcVN5jNvv3r7ErnbxxbDHxjE8\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\n    &quot;last_opened_file_path&quot;: &quot;/home/vaibhav-verma/WebstormProjects/ideathon/app/api/teacher/announcements&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\n    &quot;ts.external.directory.path&quot;: &quot;/home/vaibhav-verma/WebstormProjects/ideathon/node_modules/typescript/lib&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/app/api/teacher/announcements\" />\n      <recent name=\"$PROJECT_DIR$/app/api/admin/user\" />\n    </key>\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/app/user/friends\" />\n      <recent name=\"$PROJECT_DIR$/app/admin\" />\n      <recent name=\"$PROJECT_DIR$/app/teacher/announcements/edit/[...id]\" />\n      <recent name=\"$PROJECT_DIR$/app/api/user\" />\n      <recent name=\"$PROJECT_DIR$/app/api/study-requests/accepted-requests/[...acceptedStudyRequestId]\" />\n    </key>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-js-predefined-d6986cc7102b-deb605915726-JavaScript-WS-243.22562.222\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"3d45d623-ee8a-421e-8d0d-07f88c3fd10c\" name=\"Changes\" comment=\"\" />\n      <created>1733680600234</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1733680600234</updated>\n      <workItem from=\"1733680601320\" duration=\"285000\" />\n      <workItem from=\"1733724675594\" duration=\"611000\" />\n      <workItem from=\"1733822080765\" duration=\"1111000\" />\n      <workItem from=\"1733835011657\" duration=\"6379000\" />\n      <workItem from=\"1733847978381\" duration=\"5516000\" />\n      <workItem from=\"1733894701134\" duration=\"9865000\" />\n      <workItem from=\"1733925499497\" duration=\"1606000\" />\n      <workItem from=\"1733928369051\" duration=\"251000\" />\n      <workItem from=\"1733928630064\" duration=\"4368000\" />\n      <workItem from=\"1733980473805\" duration=\"1457000\" />\n      <workItem from=\"1734070775491\" duration=\"813000\" />\n      <workItem from=\"1734085817459\" duration=\"30000\" />\n      <workItem from=\"1734183280596\" duration=\"5230000\" />\n      <workItem from=\"1734189002399\" duration=\"3292000\" />\n      <workItem from=\"1734192305926\" duration=\"2303000\" />\n      <workItem from=\"1734194762220\" duration=\"86000\" />\n      <workItem from=\"1734199075722\" duration=\"1951000\" />\n      <workItem from=\"1734202864084\" duration=\"690000\" />\n      <workItem from=\"1734243660946\" duration=\"163000\" />\n      <workItem from=\"1734247462466\" duration=\"601000\" />\n      <workItem from=\"1734274484596\" duration=\"221000\" />\n      <workItem from=\"1734285025230\" duration=\"756000\" />\n      <workItem from=\"1734342119399\" duration=\"12152000\" />\n      <workItem from=\"1734415130463\" duration=\"154000\" />\n      <workItem from=\"1734451510425\" duration=\"1022000\" />\n      <workItem from=\"1734515159954\" duration=\"1302000\" />\n      <workItem from=\"1734587553335\" duration=\"2223000\" />\n      <workItem from=\"1734622604490\" duration=\"6450000\" />\n      <workItem from=\"1734672636682\" duration=\"3862000\" />\n      <workItem from=\"1734697995805\" duration=\"4210000\" />\n      <workItem from=\"1734709695437\" duration=\"1288000\" />\n      <workItem from=\"1734719253317\" duration=\"6275000\" />\n      <workItem from=\"1734766424331\" duration=\"15352000\" />\n      <workItem from=\"1734859762039\" duration=\"16109000\" />\n      <workItem from=\"1734888157235\" duration=\"1752000\" />\n      <workItem from=\"1734936981008\" duration=\"20081000\" />\n      <workItem from=\"1735026512179\" duration=\"9324000\" />\n      <workItem from=\"1735048088338\" duration=\"5248000\" />\n      <workItem from=\"1735060156138\" duration=\"2618000\" />\n      <workItem from=\"1735064720771\" duration=\"656000\" />\n      <workItem from=\"1735106418820\" duration=\"148000\" />\n      <workItem from=\"1735141420059\" duration=\"11523000\" />\n      <workItem from=\"1735194562583\" duration=\"6771000\" />\n      <workItem from=\"1735224189800\" duration=\"10335000\" />\n      <workItem from=\"1735280126356\" duration=\"8507000\" />\n      <workItem from=\"1735312870855\" duration=\"4460000\" />\n      <workItem from=\"1735327415197\" duration=\"5118000\" />\n      <workItem from=\"1735368401501\" duration=\"8272000\" />\n      <workItem from=\"1735394000412\" duration=\"72000\" />\n      <workItem from=\"1735395983128\" duration=\"5172000\" />\n      <workItem from=\"1735411913079\" duration=\"275000\" />\n      <workItem from=\"1735412199180\" duration=\"4549000\" />\n      <workItem from=\"1735456473928\" duration=\"2596000\" />\n      <workItem from=\"1735473072434\" duration=\"168000\" />\n      <workItem from=\"1735476153656\" duration=\"3525000\" />\n      <workItem from=\"1735481667323\" duration=\"351000\" />\n      <workItem from=\"1735490418912\" duration=\"13947000\" />\n      <workItem from=\"1735551425427\" duration=\"1037000\" />\n      <workItem from=\"1735573605003\" duration=\"15386000\" />\n      <workItem from=\"1735630632922\" duration=\"3068000\" />\n      <workItem from=\"1735646800736\" duration=\"2798000\" />\n      <workItem from=\"1735662088128\" duration=\"1184000\" />\n      <workItem from=\"1735671274748\" duration=\"238000\" />\n      <workItem from=\"1735719997150\" duration=\"3868000\" />\n      <workItem from=\"1735738596357\" duration=\"21727000\" />\n      <workItem from=\"1735803780445\" duration=\"3957000\" />\n      <workItem from=\"1735834776101\" duration=\"1436000\" />\n      <workItem from=\"1735887939114\" duration=\"9151000\" />\n      <workItem from=\"1735912253570\" duration=\"2503000\" />\n      <workItem from=\"1735936579519\" duration=\"4282000\" />\n      <workItem from=\"1735976191219\" duration=\"1696000\" />\n      <workItem from=\"1735985050166\" duration=\"4726000\" />\n      <workItem from=\"1736003028073\" duration=\"54000\" />\n      <workItem from=\"1736005381956\" duration=\"622000\" />\n      <workItem from=\"1736015697437\" duration=\"8495000\" />\n      <workItem from=\"1736059367137\" duration=\"10380000\" />\n      <workItem from=\"1736164657551\" duration=\"6350000\" />\n      <workItem from=\"1736182719895\" duration=\"1744000\" />\n      <workItem from=\"1736235191519\" duration=\"1089000\" />\n      <workItem from=\"1736266445785\" duration=\"30000\" />\n      <workItem from=\"1736322350336\" duration=\"2281000\" />\n      <workItem from=\"1736334930878\" duration=\"1509000\" />\n      <workItem from=\"1736346401880\" duration=\"13674000\" />\n      <workItem from=\"1736404657076\" duration=\"6005000\" />\n      <workItem from=\"1736424912533\" duration=\"12432000\" />\n      <workItem from=\"1736494266531\" duration=\"2126000\" />\n      <workItem from=\"1736578088376\" duration=\"1169000\" />\n      <workItem from=\"1736580717395\" duration=\"8639000\" />\n      <workItem from=\"1736609464635\" duration=\"10431000\" />\n      <workItem from=\"1736661826883\" duration=\"29277000\" />\n      <workItem from=\"1736745014949\" duration=\"1257000\" />\n      <workItem from=\"1736750325263\" duration=\"1628000\" />\n      <workItem from=\"1736764910004\" duration=\"3159000\" />\n      <workItem from=\"1736779876545\" duration=\"17843000\" />\n      <workItem from=\"1736827225342\" duration=\"2213000\" />\n      <workItem from=\"1736841852981\" duration=\"1575000\" />\n      <workItem from=\"1736869453749\" duration=\"2436000\" />\n    </task>\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n    <option name=\"exactExcludedFiles\">\n      <list>\n        <option value=\"$PROJECT_DIR$/next.config.mjs\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"OPEN_GENERIC_TABS\">\n      <map>\n        <entry key=\"6a35ed3b-0ed1-49df-9598-09b527d43acf\" value=\"TOOL_WINDOW\" />\n      </map>\n    </option>\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"6a35ed3b-0ed1-49df-9598-09b527d43acf\">\n          <value>\n            <State />\n          </value>\n        </entry>\n        <entry key=\"MAIN\">\n          <value>\n            <State>\n              <option name=\"FILTERS\">\n                <map>\n                  <entry key=\"branch\">\n                    <value>\n                      <list>\n                        <option value=\"main\" />\n                      </list>\n                    </value>\n                  </entry>\n                </map>\n              </option>\n            </State>\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"fixup! recovered files\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"fixup! recovered files\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision fcf8b49156513da7a880815252a5d7d766b96cd8)
+++ b/.idea/workspace.xml	(date 1736877560942)
@@ -5,8 +5,20 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="3d45d623-ee8a-421e-8d0d-07f88c3fd10c" name="Changes" comment="fixup! recovered files">
+      <change beforePath="$PROJECT_DIR$/.eslintrc.json" beforeDir="false" afterPath="$PROJECT_DIR$/.eslintrc.json" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/(auth)/verify-sid/[username]/page.tsx" beforeDir="false" afterPath="$PROJECT_DIR$/app/(auth)/verify-sid/[username]/page.tsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/api/admin/clubs/add-club/route.ts" beforeDir="false" afterPath="$PROJECT_DIR$/app/api/admin/clubs/add-club/route.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/api/admin/subjects/teacher/add/[...teacherId]/route.ts" beforeDir="false" afterPath="$PROJECT_DIR$/app/api/admin/subjects/teacher/add/[...teacherId]/route.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/api/aichatbot/route.ts" beforeDir="false" afterPath="$PROJECT_DIR$/app/api/aichatbot/route.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/api/study-requests/my-requests/accept/[studyRequestId]/route.ts" beforeDir="false" afterPath="$PROJECT_DIR$/app/api/study-requests/my-requests/accept/[studyRequestId]/route.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/page.tsx" beforeDir="false" afterPath="$PROJECT_DIR$/app/page.tsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/components/navbar/Avatar.tsx" beforeDir="false" afterPath="$PROJECT_DIR$/components/navbar/Avatar.tsx" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/components/navbar/Navbar.tsx" beforeDir="false" afterPath="$PROJECT_DIR$/components/navbar/Navbar.tsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/components/ui/calendar.tsx" beforeDir="false" afterPath="$PROJECT_DIR$/components/ui/calendar.tsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/lib/embedding.ts" beforeDir="false" afterPath="$PROJECT_DIR$/lib/embedding.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/model/User.ts" beforeDir="false" afterPath="$PROJECT_DIR$/model/User.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/next.config.ts" beforeDir="false" afterPath="$PROJECT_DIR$/next.config.ts" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -193,7 +205,7 @@
       <workItem from="1736779876545" duration="17843000" />
       <workItem from="1736827225342" duration="2213000" />
       <workItem from="1736841852981" duration="1575000" />
-      <workItem from="1736869453749" duration="2436000" />
+      <workItem from="1736869453749" duration="7753000" />
     </task>
     <servers />
   </component>
